service: notes-api
frameworkVersion: "3"
configValidationMode: error

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  tags:
    serviceName: notes-api
  stage: dev
  httpApi:
    cors: true
    authorizers:
      verify-token:
        type: request
        functionName: verify-token
        resultTtlInSeconds: 300
        identitySource:
          - $request.header.Authorization # this is ignored by serverless-offline but will default to the Authorization header anyway
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [NotesDynamoDBTable, Arn]
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
          Resource:
            - Fn::GetAtt: [NotesDynamoDBTable, Arn]
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.noteTableName}/index/*
      
  environment:
    NOTES_TABLE_NAME: "${self:custom.noteTableName}"
    SUPABASE_URL: "https://kjosizddxhvvsajpuoxl.supabase.co"
    SUPABASE_JWT_SECRET: '${ssm:supabase_jwt_key}'
    SUPABASE_KEY: '${ssm:supabase_key}'

custom:
  userPoolName: "${self:provider.stage}-notes-api"
  noteTableName: "${self:service}-notes-table"
  userPoolClientName: "${self:custom.userPoolName}-client"
  readCapacity: 3
  writeCapacity: 3
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

resources:
  Resources:
    NotesDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: noteId
            AttributeType: S
          - AttributeName: status
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: noteId
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: noteStatus
            KeySchema:
              - AttributeName: status
                KeyType: HASH
              - AttributeName: userId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 3
              WriteCapacityUnits: 3
        ProvisionedThroughput:
          ReadCapacityUnits: 3
          WriteCapacityUnits: 3
        TableName: ${self:custom.noteTableName}

functions:
  verify-token:
    handler: src/auth/authorizers/auth-authorizer.handler

  get-notes:
    handler: src/notes/handlers/get-notes.handler
    memorySize: 1024
    events:
      - httpApi:
          path: /notes
          method: get
          authorizer:
            name: verify-token
            type: request
  create-note:
    handler: src/notes/handlers/create-note.handler
    events:
      - httpApi:
          path: /notes
          method: post
          authorizer:
            name: verify-token
            type: request
  get-note:
    handler: src/notes/handlers/get-note.handler
    events:
      - httpApi:
          path: /notes/{id}
          method: get
          authorizer:
            name: verify-token
            type: request
  delete-note:
    handler: src/notes/handlers/delete-note.handler
    events:
      - httpApi:
          path: /notes/{id}
          method: delete
          authorizer:
            name: verify-token
            type: request
  change-note-status:
    handler: src/notes/handlers/change-note-status.handler
    events:
      - httpApi:
          path: /notes/{id}/status
          method: patch
          authorizer:
            name: verify-token
            type: request
  update-note:
    handler: src/notes/handlers/update-note.handler
    events:
      - httpApi:
          path: /notes/{id}
          method: put
          authorizer:
            name: verify-token
            type: request

  create-account:
    handler: src/auth/handlers/register.handler
    events:
      - httpApi:
          path: /auth/register
          method: post
  login:
    handler: src/auth/handlers/login.handler
    events:
      - httpApi:
          path: /auth/login
          method: post

plugins:
  - serverless-webpack
  - serverless-offline
